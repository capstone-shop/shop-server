name: CD AWS

on: # 아래의 조건을 만족할때 실행
  pull_request_target: # pull_request 가 승인되었을때
    types:
      - closed

jobs:
  build:
    # https://docs.github.com/en/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows#running-your-pull_request_target-workflow-when-a-pull-request-merges
    # pull_request 가 승인된 상황에만 아래를 실행하기 위해, github.event.pull_request.merged 가 true 인지 체크.
    #if: (github.event.pull_request.merged)

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout server
        uses: actions/checkout@v4

      - name: Checkout submodule
        uses: actions/checkout@v4
        with:
          token: '${{ secrets.SUBMODULE_PAT }}'
          repository: 'capstone-shop/${{ secrets.SUBMODULE_REPOSITORY_NAME }}'
          path: resources/settings

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Gradle
        run: ./gradlew build

        # Dockerfile 파일에 써진 내용을 바탕으로, 서버가 실행중인 상태의 도커 이미지를 build 함.
        #- run: docker build -t shop-server .
      - run: docker build . --platform linux/amd64 --file docker/Dockerfile-user --tag ${{ secrets.DOCKER_REGISTRY }}/user-image:latest
      - run: docker build . --platform linux/amd64 --file docker/Dockerfile-admin --tag ${{ secrets.DOCKER_REGISTRY }}/admin-image:latest

        # docker registry 에 로그인
      - run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login ${{ secrets.DOCKER_REGISTRY }} -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

        # build 된 이미지를 push 함.
        # docker push 명령어는, 전에 업로드한 이미지에서 변경된 레이어만 업로드하므로 빠름.
      - run: docker push ${{ secrets.DOCKER_REGISTRY }}/admin-image:latest
      - run: docker push ${{ secrets.DOCKER_REGISTRY }}/user-image:latest

        # 서버에 ssh 로 접속해서
        # 0. docker-compose.yml 파일이 있는 위치로 이동하고
        # 1. 서버 끄고
        # 2. 서버 실행
      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_SSH_SERVER }}
          username: ${{ secrets.EC2_SSH_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd backend
            docker-compose down
            docker-compose up -d